/* 1. Altere a tabela de débitos para corrigir o campo situacao_debito. Se o débito estiver 
 * vencido e não for 'Negociado' nem 'Pago', informe 'Atrasado'. */
UPDATE DEBITOS 
SET debitos.situacao_debito = 'Atrasado'
	WHERE ((CURRENT_DATE - DEBITOS.DATAVENCIMENTO) < 0) AND situacao_debito = 'Pendente'
	
/* 2. Altere a tabela de débitos para corrigir o campo situacao_debito. 
 * Se o débito não estiver vencido e não for 'Pago', informe 'Pendente'. */
UPDATE DEBITOS 
SET debitos.situacao_debito = 'Pendente'
	WHERE ((CURRENT_DATE - DEBITOS.DATAVENCIMENTO) > 0) AND situacao_debito <> 'Pago'
	
/* 3. Altere a tabela de débitos para corrigir o campo data de vencimento. 
 * Se o débito estiver com a situação 'Negociado', altere o ano da data de vencimento para ano - 5 anos. */
UPDATE DEBITOS 
SET debitos.DATAVENCIMENTO = DATEADD( - 5 YEAR TO debitos.DATAVENCIMENTO)
	WHERE situacao_debito = 'Negociado'

/* 4. Selecione o nome, e-mail e telefone de todas as pessoas.*/
SELECT PESSOA.NOME, PESSOA.EMAIL, PESSOA.TELEFONE 
FROM PESSOA

/* 5. Liste os produtos com preço unitário acima de R$ 100.*/
SELECT PRECO_UNITARIO FROM PRODUTO p 
WHERE PRECO_UNITARIO > 100

/* 6. Retorne todas as vendas realizadas em uma determinada data.*/
SELECT DATA_VENDA FROM VENDA v 
WHERE DATA_VENDA = '2023-12-23'

/* 7. Mostre o nome, a data de nascimento e a idade dos fornecedores que não têm produtos em estoque.*/
SELECT p.nome, p.data_nascimento, ((CURRENT_DATE - p.data_nascimento)/365) FROM FORNECEDOR f 
LEFT JOIN pessoa p ON p.ID_PESSOA = f.ID_PESSOA
WHERE ID_FORNECEDOR = (SELECT p.ID_FORNECEDOR FROM PRODUTO p WHERE p.QUANTIDADE_ESTOQUE IS NULL)

/* 8. Liste os clientes que já realizaram compras com débitos vencidos.*/
SELECT p.nome FROM PESSOA p 
LEFT JOIN CLIENTE c2 ON p.ID_PESSOA = c2.ID_PESSOA 
WHERE (CURRENT_DATE - DEBITOS.DATAVENCIMENTO > 0) 
!!!!!!

/* 9. Selecione os clientes que possuem itens no carrinho de compras e possuem débitos vencidos.*/
/* NÃO ERA PARA REALIZAR */
 

/* 10. Selecione os 10 maiores devedores trazendo código, nome, idade e a 
 * soma total dos débitos vencidos e a soma total dos débitos pagos.*/
SELECT p.ID_PESSOA , p.nome, ((CURRENT_DATE - p.data_nascimento)/365) FROM PESSOA p
LEFT JOIN PAGAMENTO p2 ON p2.VALOR_DIFERENCA < 0
!!!!!! soma !!!!!!


/* 11. Atualize o preço unitário de todos os produtos com estoque inferior a 10 unidades para mais 10%.*/
UPDATE PRODUTO p 
SET p.PRECO_UNITARIO = (p.PRECO_UNITARIO + ((p.PRECO_UNITARIO / 100) * 10))
	WHERE p.QUANTIDADE_ESTOQUE < 10 

SELECT * FROM HISTORICO_COMPRAS_CLIENTE 
SELECT * FROM HISTORICO_PRECOS hp 
SELECT * FROM DEBITOS d 
SELECT * FROM CLIENTE c 

/* 12. Modifique o status de entrega para 'Concluído' em todas as entregas realizadas antes de '2024-01-01'.*/
/* NÃO ERA PARA REALIZAR */

/* 13. Altere todos os débitos que estão com situação = 'Atrasado' para 'Pagos' 
 * se o mesmo ter o registro na tabela de pagamento.*/
UPDATE DEBITOS 
SET debitos.situacao_debito = 'Pago'
	WHERE  situacao_debito = 'Atrasado'

/* 15. Selecione as vendas entre o mês de dezembro de 2023 até janeiro de 2024.*/
SELECT * FROM VENDA 
WHERE DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-01'
	
/* 16. Liste os produtos com estoque entre 5 e 20 unidades.*/
SELECT nome FROM PRODUTO
WHERE QUANTIDADE_ESTOQUE BETWEEN 5 AND 20

/* 17. Retorne todas as pessoas com nomes que começam com 'A'.*/
SELECT nome FROM PESSOA p 
WHERE nome LIKE 'A%'

/* 18. Selecione os produtos que não foram vendidos.*/
SELECT nome FROM PRODUTO p 
LEFT JOIN VENDA v ON p.ID_PRODUTO <> v.ID_PRODUTO
WHERE 
!!!!!!!!!!
SELECT * FROM HISTORICO_COMPRAS_CLIENTE hcc 

/* 19. Liste os produtos vendidos para os clientes 'Carla Souza', 'Larissa Ferreira'.*/
SELECT p.nome FROM PRODUTO p 
LEFT JOIN 
!!!!!!!!!

/* 20. Mostre as pessoas que são clientes OU fornecedores.*/
SELECT nome FROM PESSOA p 
LEFT JOIN CLIENTE c ON p.ID_PESSOA = c.ID_PESSOA AND
LEFT JOIN FORNECEDOR f ON p.ID_PESSOA = f.ID_PESSOA
!!!!!!!!!

/* 21. Retorne todas as informações da venda com detalhes do cliente e forma de pagamento.*/
SELECT * FROM VENDA v 
!!!!!!!!!!
/* 22. Mostre todas as compras de um determinado produto ('Placa de Captura'), incluindo detalhes do produto.*/
SELECT * FROM PRODUTO p 
WHERE p.nome = 'Placa de Captura' AND (SELECT * FROM HISTORICO_COMPRAS_CLIENTE hcc WHERE hcc. )
!!!!!!!!!!!!

/* 23. Combine os nomes dos fornecedores com os nomes dos clientes e suas respectivas 
 * idades que irão fazer no ano de 2025.*/

/* 24. Retorne todos os logradouros e bairros, indicando se pertencem ou não a uma pessoa.*/
SELECT * FROM LOGRADOURO l AND FROM BAIRRO b 

/* 25. Selecione os produtos que têm preço unitário superior à média.*/
SELECT p.nome FROM PRODUTO p 
GROUP BY p.PRECO_UNITARIO 
HAVING p.PRECO_UNITARIO > AVG(p.PRECO_UNITARIO) 

SELECT * FROM PESSOA p 

/* 26. Liste os clientes que fizeram compras em cidades com mais de 1 milhão de habitantes.*/
SELECT p.nome FROM PESSOA p 
LEFT JOIN CLIENTE c ON p.ID_PESSOA = c.ID_PESSOA 

/* 27. Mostre a quantidade total de produtos vendidos por fornecedor. */

/* 28. Liste os clientes que realizaram compras com valor total superior a R$ 500. */

/* 29. Retorne todas as pessoas com seus endereços de correspondência e residência, se tiverem. */

/* 30. Liste os produtos e seus preços, juntamente com o nome do fornecedor, mesmo que não tenham fornecedor. */

/* 31. Liste os produtos em ordem decrescente de quantidade em estoque. */

/* 32. Retorne as vendas em ordem crescente de valor total. */

/* 33. Liste os produtos com quantidade em estoque menor que a média de todos os produtos. */

/* 34. Selecione todas as pessoas cujo número de telefone seja igual ao de outra pessoa. */

/* 35. Aumente em 10% o preço unitário de todos os produtos fornecidos por fornecedores de São Paulo. */

/* 36. Lista todas as vendas que estão com débito 'Negociado'. */
